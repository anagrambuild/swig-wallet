name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  RUST_VERSION: 1.84.0
  SOLANA_VERSION: 2.2.17
  CARGO_TERM_COLOR: always
  RUSTC_WRAPPER: sccache
  SCCACHE_GHA_ENABLED: true
  SCCACHE_CACHE_SIZE: 2G

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Aggressive cleanup
        run: |
          # Remove Java (JDKs)
          sudo rm -rf /usr/lib/jvm

          # Remove .NET SDKs
          sudo rm -rf /usr/share/dotnet

          # Remove Swift toolchain
          sudo rm -rf /usr/share/swift

          # Remove Haskell (GHC)
          sudo rm -rf /usr/local/.ghcup

          # Remove Julia
          sudo rm -rf /usr/local/julia*

          # Remove Android SDKs
          sudo rm -rf /usr/local/lib/android

          # Remove Chromium (optional if not using for browser tests)
          sudo rm -rf /usr/local/share/chromium

          # Remove Microsoft/Edge and Google Chrome builds
          sudo rm -rf /opt/microsoft /opt/google

          # Remove Azure CLI
          sudo rm -rf /opt/az

          # Remove PowerShell
          sudo rm -rf /usr/local/share/powershell

          # Remove CodeQL and other toolcaches
          sudo rm -rf /opt/hostedtoolcache

          docker system prune -af || true
          docker builder prune -af || true
          df -h

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy, rust-analyzer

      - name: Install libudev-dev
        run: |
          sudo apt-get update
          sudo apt-get install -y libudev-dev

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.8

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Solana
        run: |
          sh -c "$(curl -sSfL https://release.anza.xyz/v${{ env.SOLANA_VERSION }}/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
          export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
          solana --version

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: nextest

      - name: Build Solana Program
        run: |
          cargo build-sbf --arch v1

      - name: Run Rust Tests with nextest
        run: |
          cargo nextest run --config-file nextest.toml --profile ci --all --workspace --no-fail-fast
          mkdir -p target/nextest/reports
          cp target/nextest/ci/output.xml target/nextest/reports/standard-tests.xml

      - name: Build Solana Program with program_scope_test feature
        run: |
          cargo build-sbf --arch v1 --features=program_scope_test

      - name: Run Program Scope Tests with nextest
        run: |
          cargo nextest run --config-file nextest.toml --profile ci --all --workspace --no-fail-fast --features=program_scope_test
          mkdir -p target/nextest/reports
          cp target/nextest/ci/output.xml target/nextest/reports/program-scope-tests.xml
      
      - name: Run Rust SDK Tests with nextest
        run: |
          cargo nextest run --config-file nextest.toml --profile ci --all --workspace --no-fail-fast --features=rust_sdk_test,program_scope_test
          mkdir -p target/nextest/reports
          cp target/nextest/ci/output.xml target/nextest/reports/rust-sdk-tests.xml

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: target/nextest/reports/*.xml

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: "target/nextest/reports/*.xml"
          check_name: "Test Results"
